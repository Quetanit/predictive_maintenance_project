import streamlit as st
import reveal_slides as rs

def presentation_page():
    st.title("Презентация проекта")

    # Презентация в формате Markdown
    presentation_markdown = """
    # Бинарная классификация для предиктивного обслуживания оборудования
---
## Цель проекта
- Построить и сравнить модели машинного обучения для предсказания отказа оборудования
- Классы: отказ (Target = 1) и отсутствие отказа (Target = 0)
---
## Используемые модели
- Логистическая регрессия
- Случайный лес (Random Forest)
- XGBoost (лучший по качеству)
- Метод опорных векторов (SVM)
---
## Метрики оценки моделей
- Accuracy (точность)
- Precision (точность положительных предсказаний)
- Recall (полнота)
- F1-score (гармоническое среднее precision и recall)
- ROC-AUC (площадь под ROC-кривой)
---
## Сравнение моделей по метрикам
- XGBoost показывает наилучшие результаты по большинству метрик
- Логистическая регрессия и SVM уступают, но дают базовые ориентиры
- Случайный лес демонстрирует средние показатели
---
## Визуализация результатов
- ROC-кривые для каждой модели для оценки качества классификации
- Матрицы ошибок для анализа типов ошибок (ложные срабатывания и пропуски)
- График сравнения метрик (bar plot) для наглядности
---
## Streamlit-приложение
- Основная страница: загрузка данных, обучение всех моделей, отображение метрик и графиков
- Страница презентации: слайд-шоу с описанием проекта и результатов
- Возможность делать предсказания на новых данных через интерфейс
---
## Выводы и перспективы
- XGBoost — оптимальный выбор для задачи предиктивного обслуживания
- Возможные улучшения: балансировка классов, расширение признаков, подбор гиперпараметров
- Интеграция с производственными системами для реального мониторинга оборудования
"""

    with st.sidebar:
        st.header("Настройки презентации")
        theme = st.selectbox("Тема", ["white", "black", "league", "beige", "sky", "night", "serif", "simple", "solarized"])
        height = st.number_input("Высота слайдов", value=300)
        transition = st.selectbox("Переход", ["slide", "convex", "concave", "zoom", "none"])
        plugins = st.multiselect("Плагины", ["highlight", "katex", "mathjax2", "mathjax3", "notes", "search", "zoom"], [])

    rs.slides(
        presentation_markdown,
        height=height,
        theme=theme,
        config={
            "transition": transition,
            "plugins": plugins
        },
        markdown_props={"data-separator-vertical": "^--$"}
    )

